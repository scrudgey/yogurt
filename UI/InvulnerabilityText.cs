using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using Easings;

public class InvulnerabilityText : MonoBehaviour {
    public enum State { translate, hang, fade };
    public State state;
    public Text text;
    public float lifetime = 1f;
    public float hangtime = 0.4f;
    public float fadetime = 1f;
    public float rise = 0.1f;
    public Vector3 initialPosition;
    public float timer = 0;
    public Color color;
    public Outline[] outlines;
    void Awake() {
        text = GetComponent<Text>();
        initialPosition = transform.position;
        outlines = GetComponents<Outline>();
        color = text.color;
    }
    void Update() {
        timer += Time.deltaTime;
        switch (state) {
            default:
            case State.translate:
                text.color = color;
                if (timer < lifetime) {
                    Vector3 pos = transform.position;
                    pos.y = (float)PennerDoubleAnimation.CircEaseInOut(timer, initialPosition.y, rise, lifetime);
                    transform.position = pos;
                } else {
                    state = State.hang;
                    timer = 0f;
                }
                break;
            case State.hang:
                text.color = color;
                if (timer > hangtime)
                    state = State.fade;
                break;
            case State.fade:
                if (timer < fadetime) {
                    float alpha = (float)PennerDoubleAnimation.Linear(timer, 1f, -1f, lifetime);
                    color.a = alpha;
                    text.color = color;
                    foreach (Outline outline in outlines) {
                        Color c = outline.effectColor;
                        c.a = alpha;
                    }
                } else {
                    Destroy(transform.parent.gameObject);
                }
                break;
        }
    }
}
